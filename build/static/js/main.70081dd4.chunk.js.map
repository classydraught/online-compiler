{
  "version": 3,
  "sources": [
    "Compiler.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "Compiler",
    "props",
    "selectLanguage",
    "e",
    "setState",
    "language",
    "target",
    "value",
    "showVersionFlag",
    "selectVersion",
    "version",
    "handleProgram",
    "program",
    "handleExecuteProgram",
    "state",
    "toLowerCase",
    "axios",
    "post",
    "then",
    "response",
    "showOutput",
    "result",
    "data",
    "catch",
    "error",
    "showError",
    "get",
    "console",
    "log",
    "showVersions",
    "showLanguages",
    "versionsData",
    "this",
    "length",
    "map",
    "val",
    "i",
    "key",
    "filter",
    "versions",
    "item",
    "index",
    "className",
    "name",
    "onChange",
    "htmlFor",
    "style",
    "color",
    "fontSize",
    "rows",
    "onClick",
    "cpuTime",
    "memory",
    "output",
    "React",
    "Component",
    "App",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister"
  ],
  "mappings": "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",
  "file": "static/js/main.70081dd4.chunk.js",
  "sourcesContent": [
    "import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass Compiler extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        language : \"\",\r\n        version : \"0\",\r\n        program: \"\",\r\n        showVersionFlag: false,\r\n        data: [],\r\n        result:{},\r\n        showOutput: false,\r\n        showError: false\r\n      }\r\n    }\r\n    selectLanguage = (e) => {\r\n      this.setState({language:e.target.value, showVersionFlag: true});\r\n    }\r\n    selectVersion = (e) => {\r\n      this.setState({version:e.target.value});\r\n    }\r\n\r\n    handleProgram = (e) => {\r\n      this.setState({program:e.target.value});\r\n    }\r\n\r\n    handleExecuteProgram = () => {\r\n      let language = \"\";\r\n      if (this.state.language === \"C++\") {\r\n        language = \"cpp\"\r\n      } else if (this.state.language === \"C#\") {\r\n        language = \"csharp\";\r\n      } else {\r\n        language = this.state.language.toLowerCase();\r\n      }\r\n\r\n    axios.post('/execute', {\"language\": language, \"version\": this.state.version, \"program\":this.state.program})\r\n        .then((response) => {\r\n            this.setState({showOutput: true, result: response.data})\r\n        })\r\n        .catch((error) => {\r\n          this.setState({showError: true});\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        axios.get('/execute')\r\n        .then((response) => {\r\n            this.setState({data:response.data});\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    render(){\r\n      let showVersions;\r\n      let showLanguages;\r\n      let versionsData;\r\n      if (this.state.data.length > 0) {\r\n      showLanguages = this.state.data.map((val, i) => {\r\n        return (\r\n          <option key={i}>{val.language}</option>\r\n        )\r\n      })\r\n\r\n      versionsData = this.state.data.filter((val) => val.language === this.state.language);\r\n        if (versionsData.length > 0) {\r\n          showVersions = versionsData[0].versions.map((item, i) => {\r\n          return (\r\n            <option key={i} value={item.index}>{item.version}</option>\r\n          )\r\n        })\r\n        }\r\n      }\r\n      \r\n      return (<div className=\"container-fluid\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-md-12 p-3 mb-2 bg-white text-primary font-weight-bold text-center\">Synxa compiler</div>\r\n                      <div className=\"col-md-6 border border-secondary bg-light text-dark\">\r\n                        <div className=\"row\">\r\n                          <div className=\"form-group row col-md-6 mt-1\">\r\n                              <div className=\"col-sm-3 col-form-label\">Language </div>\r\n                              <div className=\"col-sm-9\">\r\n                                <select className=\"form-control\" name=\"language\" value={this.state.language} onChange={this.selectLanguage}>\r\n                                  <option value=\"Select Language\">Select Language</option>\r\n                                  {showLanguages}\r\n                                </select>\r\n                            </div>\r\n                          </div>\r\n                         {this.state.showVersionFlag ? <div className=\"form-group row col-md-6 mt-1\">\r\n                              <div className=\"col-sm-3 col-form-label\">Version </div>\r\n                              <div className=\"col-sm-9\">\r\n                                <select className=\"form-control\" name=\"version\" value={this.state.version} onChange={this.selectVersion}>\r\n                                    <option value=\"Select Version\">Select Version</option>\r\n                                    {showVersions}\r\n                                </select>\r\n                              </div>\r\n                           </div>:\"\"}\r\n                          <div className=\"form-group col-md-12\">\r\n                            <label htmlFor=\"program\">Program</label>\r\n                            <textarea className=\"form-control\" style={{color: \"black\", fontSize:'14px'}} rows=\"20\" name=\"program\" value={this.state.program} onChange={this.handleProgram}></textarea>\r\n                            <button className=\"col-sm-4 mt-2 btn btn-success btn-sm float-right\" onClick={this.handleExecuteProgram}>Execute</button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-md-6 p-3 bg-dark text-white border border-secondary\">\r\n                        <header className=\"p-3 mb-2 text-white font-weight-bold text-center\">Result </header>\r\n                        {this.state.showOutput ? <div className=\"row\">\r\n                            <div className=\"col-md-12\"> \r\n                                <span className=\"font-weight-bold text-success\">CPU Time : </span> \r\n                                <span className=\"font-weight-bold text-success\">{this.state.result.cpuTime} sec(s)</span> \r\n                            </div>\r\n                            <div className=\"col-md-12\"> \r\n                                <span className=\"font-weight-bold text-success\">Memory Consumption : </span> \r\n                                <span className=\"font-weight-bold text-success\">{this.state.result.memory} kilobyte(s)</span> \r\n                            </div>\r\n                            <div className=\"col-md-12\"> \r\n                                <span className=\"font-weight-bold text-white\">Output : </span> \r\n                                <span className=\"font-weight-bold text-white\">{this.state.result.output}</span> \r\n                            </div>\r\n                        </div> : \"\"}\r\n                        {this.state.showError ? \r\n                          <div className=\"row\">\r\n                            There is a Technical issue/server down. Please try after sometime.\r\n                          </div> : \"\"\r\n                        }\r\n                      </div>\r\n                    </div>\r\n              </div>)\r\n    }\r\n    \r\n  }\r\n\r\n  export default Compiler;",
    "import React from 'react';\nimport Compiler from './Compiler';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Compiler />\n    </div>\n  );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
